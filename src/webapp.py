import folium
import os
import streamlit as st
import yaml
import wget

from streamlit_folium import st_folium
from PIL import Image

import torch

from model.yolo import YoloV3
from tools.inference import model_inference, draw_boxes
from tools.map import get_map_picture


class Params:
    def __init__(self, project_file):
        self.params = yaml.safe_load(open(project_file).read())

    def __getattr__(self, item):
        return self.params.get(item, None)


def load_weights():
    if not os.path.exists("states/dior_weights.pth"):
        if not os.path.exists("states"):
            os.mkdir("states")
        wget.download(
            "https://github.com/Vlad15lav/" /
            "ors-detection/releases/download/weights/dior_weights.pth",
            out="states/dior_weights.pth",
        )


@st.cache_data
def load_model():
    cfg = Params("projects/dior.yml")

    model = YoloV3(len(cfg.mask), cfg.anchors, 512)
    try:
        model.load_state_dict(
            torch.load("states/dior_weights.pth",
                       map_location=torch.device("cpu"))
        )
    except FileNotFoundError:
        print(
            "Weights is not found. You should move the weights to \
            /states/{name_proj}_weights.pth"
        )

    return model


# def get_inference(img, model):
#     bbox, cls_label, obj_count = model_inference(model, img)
#     img_draw = draw_boxes(img, bbox, cls_label)


def main():
    st.set_page_config(page_title="Space Detector",
                       page_icon="üåç",
                       layout="centered")

    st.title("AI Space Detector")
    st.write("–°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö.")
    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
        st.write(
            "–ü—Ä–∏–≤–µ—Ç!üëã –≠—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ " /
            "–Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Öüåçüõ∞Ô∏è."
        )
        st.write(
            "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö [DIOR]" /
            "(https://arxiv.org/abs/1909.00133). " /
            "–ó–¥–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 20 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, " /
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö‚úàüö§üöûüèüüè≠üåâ."
        )
        st.image("./images/classes.png")
        st.write(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É/—Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤üåçüõ∞Ô∏è, " /
            "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–µ–ºüîç. " /
            "–ú–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è [Google Earth]" /
            "(https://earth.google.com/web/), [Google Map]" /
            "(https://www.google.com/maps) –∏–ª–∏ [Yandex Map]" /
            "(https://yandex.ru/maps).\n" /
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Earth."
        )
        st.write(
            "–ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π Object Detection " /
            "[YOLOv3](https://arxiv.org/abs/1804.02767)."
        )
        st.write(
            "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π [GitHub]" /
            "(https://github.com/Vlad15lav/ors-detection) –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."
        )

    with st.sidebar:
        latitude = st.sidebar.text_input("–®–∏—Ä–æ—Ç–∞", "55.82103")
        longitude = st.sidebar.text_input("–î–æ–ª–≥–∞—Ç–∞", "49.16219")
        zoom = st.sidebar.text_input("–ú–∞—Å—à—Ç–∞–±", "16")

        conf = st.slider("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", 0.01, 1.0, 0.35)
        select_region = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ",
                                     type=["png", "jpg", "jpeg"])
    load_weights()
    model = load_model()

    if uploaded_file is not None:
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(
                "<div style='text-align: center;'>" /
                f"{'–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}</div>",
                unsafe_allow_html=True,
            )
            # st.write('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
            st.image(uploaded_file)
            image = Image.open(uploaded_file)

        bbox, cls_label, text_statistic = model_inference(model,
                                                          image,
                                                          conf_tresh=conf)
        img_draw = draw_boxes(image, bbox, cls_label)

        with col2:
            # st.write('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
            st.markdown(
                "<div style='text-align: center;'>" /
                f"{'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏'}</div>",
                unsafe_allow_html=True,
            )
            st.image(img_draw)
            st.text(text_statistic)

    if select_region:
        uploaded_file = get_map_picture(latitude, longitude, zoom)

        if uploaded_file is None:
            st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏! " /
                     "–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö")
        else:
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(
                    "<div style='text-align: center;'>" /
                    f"{'–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}</div>",
                    unsafe_allow_html=True,
                )
                st.image(uploaded_file)

            bbox, cls_label, text_statistic = model_inference(
                model, uploaded_file, conf_tresh=conf
            )
            img_draw = draw_boxes(uploaded_file, bbox, cls_label)

            with col2:
                st.markdown(
                    "<div style='text-align: center;'>" /
                    f"{'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏'}</div>",
                    unsafe_allow_html=True,
                )
                st.image(img_draw)
                st.text(text_statistic)

            m = folium.Map(location=[latitude, longitude], zoom_start=zoom)
            folium.Marker(
                [latitude, longitude],
                popup="–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                tooltip=f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {longitude} {latitude}",
            ).add_to(m)
            st_folium(m, width=725, returned_objects=[])


if __name__ == "__main__":
    main()
